{"file_contents":{"design_guidelines.md":{"content":"# Personal Project Management App Design Guidelines\n\n## Design Approach\n**Selected Approach**: Design System (Material Design-inspired)\n**Justification**: Utility-focused productivity tool requiring efficiency, consistency, and information-dense displays. The app prioritizes function over visual flair, making a systematic approach ideal for task management workflows.\n\n## Core Design Elements\n\n### Color Palette\n**Primary Colors**:\n- Light Mode: 220 85% 25% (Deep blue for trust and productivity)\n- Dark Mode: 220 85% 75% (Lighter blue for dark backgrounds)\n\n**Accent Colors**:\n- Success: 142 69% 45% (Green for completed tasks)\n- Warning: 38 92% 50% (Orange for overdue items)\n- Neutral: 220 15% 95% (Light backgrounds)\n- Dark Neutral: 220 15% 15% (Dark mode backgrounds)\n\n**Background Treatments**:\n- Clean, minimal solid colors\n- Subtle card shadows for component separation\n- No gradients - focus on functional clarity\n\n### Typography\n**Font Stack**: Inter (Google Fonts)\n- Headers: 600-700 weight, sizes from text-lg to text-3xl\n- Body: 400 weight, text-sm to text-base\n- Code/Labels: 500 weight, text-xs to text-sm\n\n### Layout System\n**Spacing Units**: Tailwind 2, 4, 6, 8, 12, 16\n- Consistent 4-unit (1rem) grid system\n- Cards with p-6, lists with p-4\n- Section spacing with gap-8 or gap-12\n\n### Component Library\n\n**Navigation**: \n- Left sidebar with project tree and quick actions\n- Top bar with search, user menu, and breadcrumbs\n- Collapsible sidebar for mobile responsiveness\n\n**Task Management**:\n- Kanban cards with drag-drop zones\n- List view with sortable columns\n- Task detail modals with form inputs\n- Priority indicators using color-coded badges\n\n**Data Displays**:\n- Progress bars for project completion\n- Status badges with semantic colors\n- Date pickers with calendar overlays\n- Charts using minimal, functional styling\n\n**Forms**:\n- Clean input fields with subtle borders\n- Dropdown selectors for categories/priorities\n- Toggle switches for task completion\n- Form validation with inline error messages\n\n## Key Design Principles\n\n1. **Information Hierarchy**: Clear visual hierarchy using typography scale and spacing\n2. **Functional Focus**: Every visual element serves a productivity purpose\n3. **Consistent Patterns**: Reusable component patterns across all views\n4. **Accessibility First**: High contrast ratios, keyboard navigation support\n5. **Mobile Responsive**: Adaptive layouts that work on all screen sizes\n\n## Critical Constraints\n- No decorative animations - focus on functional micro-interactions\n- Maintain consistent spacing throughout using the defined unit system\n- Dark mode implementation must be comprehensive across all components\n- Prioritize loading speed over visual effects\n\nThis systematic approach ensures a professional, efficient tool that enhances personal productivity rather than distracting from it.","size_bytes":2857},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        success: \"hsl(142 69% 45%)\",\n        warning: \"hsl(38 92% 50%)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4123},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProjectSchema, insertTaskSchema, insertTagSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Enable JSON parsing\n  app.use(express.json());\n\n  // Project routes\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ error: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, validatedData);\n      if (!project) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(400).json({ error: \"Invalid project data\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const projectId = req.query.projectId as string;\n      const tasks = await storage.getTasks(projectId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const task = await storage.getTask(req.params.id);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error fetching task:\", error);\n      res.status(500).json({ error: \"Failed to fetch task\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Error creating task:\", error);\n      res.status(400).json({ error: \"Invalid task data\" });\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(req.params.id, validatedData);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n      res.status(400).json({ error: \"Invalid task data\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/status\", async (req, res) => {\n    try {\n      const { status } = req.body;\n      if (!status) {\n        return res.status(400).json({ error: \"Status is required\" });\n      }\n      const task = await storage.updateTaskStatus(req.params.id, status);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error) {\n      console.error(\"Error updating task status:\", error);\n      res.status(500).json({ error: \"Failed to update task status\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteTask(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Tag routes\n  app.get(\"/api/tags\", async (req, res) => {\n    try {\n      const tags = await storage.getTags();\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching tags:\", error);\n      res.status(500).json({ error: \"Failed to fetch tags\" });\n    }\n  });\n\n  app.post(\"/api/tags\", async (req, res) => {\n    try {\n      const validatedData = insertTagSchema.parse(req.body);\n      const tag = await storage.createTag(validatedData);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error(\"Error creating tag:\", error);\n      res.status(400).json({ error: \"Invalid tag data\" });\n    }\n  });\n\n  // Search routes\n  app.get(\"/api/search/tasks\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const tasks = await storage.searchTasks(query);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error searching tasks:\", error);\n      res.status(500).json({ error: \"Failed to search tasks\" });\n    }\n  });\n\n  app.get(\"/api/search/projects\", async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      if (!query) {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const projects = await storage.searchProjects(query);\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error searching projects:\", error);\n      res.status(500).json({ error: \"Failed to search projects\" });\n    }\n  });\n\n  // Health check route\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":6678},"server/storage.ts":{"content":"import { \n  type Project, \n  type InsertProject, \n  type Task, \n  type InsertTask,\n  type Tag,\n  type InsertTag,\n  TaskStatus,\n  TaskPriority\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// Storage interface for all CRUD operations\nexport interface IStorage {\n  // Project operations\n  getProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Task operations\n  getTasks(projectId?: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  updateTaskStatus(id: string, status: string): Promise<Task | undefined>;\n\n  // Tag operations\n  getTags(): Promise<Tag[]>;\n  getTag(id: string): Promise<Tag | undefined>;\n  createTag(tag: InsertTag): Promise<Tag>;\n  updateTag(id: string, updates: Partial<InsertTag>): Promise<Tag | undefined>;\n  deleteTag(id: string): Promise<boolean>;\n\n  // Search operations\n  searchTasks(query: string): Promise<Task[]>;\n  searchProjects(query: string): Promise<Project[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project>;\n  private tasks: Map<string, Task>;\n  private tags: Map<string, Tag>;\n\n  constructor() {\n    this.projects = new Map();\n    this.tasks = new Map();\n    this.tags = new Map();\n    \n    // Initialize with sample data for demonstration\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Create sample projects\n    const project1: Project = {\n      id: \"proj-1\",\n      name: \"个人项目管理应用\",\n      description: \"开发一个功能完整的个人项目管理工具，支持任务管理、项目跟踪和进度可视化。\",\n      status: \"active\",\n      dueDate: new Date(\"2025-02-28\"),\n      createdAt: new Date(\"2025-01-01\"),\n    };\n\n    const project2: Project = {\n      id: \"proj-2\",\n      name: \"网站重设计项目\",\n      description: \"重新设计公司官方网站，提升用户体验和现代化设计。\",\n      status: \"active\",\n      dueDate: new Date(\"2025-03-15\"),\n      createdAt: new Date(\"2025-01-10\"),\n    };\n\n    this.projects.set(project1.id, project1);\n    this.projects.set(project2.id, project2);\n\n    // Create sample tasks\n    const tasks: Task[] = [\n      {\n        id: \"task-1\",\n        projectId: \"proj-1\",\n        title: \"设计数据库架构\",\n        description: \"设计项目和任务的数据模型，确保数据完整性和查询性能。\",\n        status: TaskStatus.DONE,\n        priority: TaskPriority.HIGH,\n        dueDate: new Date(\"2025-01-20\"),\n        estimatedHours: 6,\n        actualHours: 5,\n        tags: [\"后端\", \"数据库\"],\n        createdAt: new Date(\"2025-01-01\"),\n        updatedAt: new Date(\"2025-01-15\"),\n      },\n      {\n        id: \"task-2\",\n        projectId: \"proj-1\",\n        title: \"实现任务看板功能\",\n        description: \"开发拖拽式任务看板，支持任务状态切换和实时更新。\",\n        status: TaskStatus.IN_PROGRESS,\n        priority: TaskPriority.HIGH,\n        dueDate: new Date(\"2025-01-25\"),\n        estimatedHours: 10,\n        actualHours: null,\n        tags: [\"前端\", \"React\"],\n        createdAt: new Date(\"2025-01-10\"),\n        updatedAt: new Date(\"2025-01-18\"),\n      },\n      {\n        id: \"task-3\",\n        projectId: \"proj-2\",\n        title: \"用户体验研究\",\n        description: \"进行用户访谈和需求分析，了解用户痛点和需求。\",\n        status: TaskStatus.TODO,\n        priority: TaskPriority.MEDIUM,\n        dueDate: new Date(\"2025-01-30\"),\n        estimatedHours: 8,\n        actualHours: null,\n        tags: [\"UX\", \"研究\"],\n        createdAt: new Date(\"2025-01-12\"),\n        updatedAt: new Date(\"2025-01-12\"),\n      },\n      {\n        id: \"task-4\",\n        projectId: \"proj-1\",\n        title: \"API接口开发\",\n        description: \"开发RESTful API接口，支持项目和任务的CRUD操作。\",\n        status: TaskStatus.IN_PROGRESS,\n        priority: TaskPriority.HIGH,\n        dueDate: new Date(\"2025-02-01\"),\n        estimatedHours: 12,\n        actualHours: null,\n        tags: [\"后端\", \"API\"],\n        createdAt: new Date(\"2025-01-15\"),\n        updatedAt: new Date(\"2025-01-19\"),\n      },\n    ];\n\n    tasks.forEach(task => this.tasks.set(task.id, task));\n\n    // Create sample tags\n    const sampleTags: Tag[] = [\n      { id: \"tag-1\", name: \"前端\", color: \"#3B82F6\", createdAt: new Date() },\n      { id: \"tag-2\", name: \"后端\", color: \"#10B981\", createdAt: new Date() },\n      { id: \"tag-3\", name: \"设计\", color: \"#F59E0B\", createdAt: new Date() },\n      { id: \"tag-4\", name: \"测试\", color: \"#8B5CF6\", createdAt: new Date() },\n    ];\n\n    sampleTags.forEach(tag => this.tags.set(tag.id, tag));\n  }\n\n  // Project operations\n  async getProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = {\n      id,\n      name: insertProject.name,\n      description: insertProject.description ?? null,\n      status: insertProject.status ?? \"active\",\n      dueDate: insertProject.dueDate ?? null,\n      createdAt: new Date(),\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined> {\n    const project = this.projects.get(id);\n    if (!project) return undefined;\n    \n    const updatedProject = { ...project, ...updates };\n    this.projects.set(id, updatedProject);\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    // Also delete all tasks associated with this project\n    const projectTasks = Array.from(this.tasks.values()).filter(task => task.projectId === id);\n    projectTasks.forEach(task => this.tasks.delete(task.id));\n    \n    return this.projects.delete(id);\n  }\n\n  // Task operations\n  async getTasks(projectId?: string): Promise<Task[]> {\n    const allTasks = Array.from(this.tasks.values());\n    const filteredTasks = projectId \n      ? allTasks.filter(task => task.projectId === projectId)\n      : allTasks;\n    \n    return filteredTasks.sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const now = new Date();\n    const task: Task = {\n      id,\n      projectId: insertTask.projectId,\n      title: insertTask.title,\n      description: insertTask.description ?? null,\n      status: insertTask.status ?? TaskStatus.TODO,\n      priority: insertTask.priority ?? TaskPriority.MEDIUM,\n      dueDate: insertTask.dueDate ?? null,\n      estimatedHours: insertTask.estimatedHours ?? null,\n      actualHours: insertTask.actualHours ?? null,\n      tags: insertTask.tags ?? null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) return undefined;\n    \n    const updatedTask = { \n      ...task, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async updateTaskStatus(id: string, status: string): Promise<Task | undefined> {\n    return this.updateTask(id, { status });\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  // Tag operations\n  async getTags(): Promise<Tag[]> {\n    return Array.from(this.tags.values())\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getTag(id: string): Promise<Tag | undefined> {\n    return this.tags.get(id);\n  }\n\n  async createTag(insertTag: InsertTag): Promise<Tag> {\n    const id = randomUUID();\n    const tag: Tag = {\n      id,\n      name: insertTag.name,\n      color: insertTag.color ?? \"#3B82F6\",\n      createdAt: new Date(),\n    };\n    this.tags.set(id, tag);\n    return tag;\n  }\n\n  async updateTag(id: string, updates: Partial<InsertTag>): Promise<Tag | undefined> {\n    const tag = this.tags.get(id);\n    if (!tag) return undefined;\n    \n    const updatedTag = { ...tag, ...updates };\n    this.tags.set(id, updatedTag);\n    return updatedTag;\n  }\n\n  async deleteTag(id: string): Promise<boolean> {\n    return this.tags.delete(id);\n  }\n\n  // Search operations\n  async searchTasks(query: string): Promise<Task[]> {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.tasks.values()).filter(task =>\n      task.title.toLowerCase().includes(lowerQuery) ||\n      task.description?.toLowerCase().includes(lowerQuery) ||\n      task.tags?.some(tag => tag.toLowerCase().includes(lowerQuery))\n    );\n  }\n\n  async searchProjects(query: string): Promise<Project[]> {\n    const lowerQuery = query.toLowerCase();\n    return Array.from(this.projects.values()).filter(project =>\n      project.name.toLowerCase().includes(lowerQuery) ||\n      project.description?.toLowerCase().includes(lowerQuery)\n    );\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":9677},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // active, archived\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: varchar(\"project_id\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"todo\"), // todo, in_progress, done\n  priority: varchar(\"priority\", { length: 10 }).notNull().default(\"medium\"), // low, medium, high, urgent\n  dueDate: timestamp(\"due_date\"),\n  estimatedHours: integer(\"estimated_hours\"),\n  actualHours: integer(\"actual_hours\"),\n  tags: text(\"tags\").array(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Tags table for better organization\nexport const tags = pgTable(\"tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  color: varchar(\"color\", { length: 7 }).notNull().default(\"#3B82F6\"), // hex color\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTagSchema = createInsertSchema(tags).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type Tag = typeof tags.$inferSelect;\nexport type InsertTag = z.infer<typeof insertTagSchema>;\n\n// Enums for better type safety\nexport const TaskStatus = {\n  TODO: \"todo\" as const,\n  IN_PROGRESS: \"in_progress\" as const,\n  DONE: \"done\" as const,\n} as const;\n\nexport const TaskPriority = {\n  LOW: \"low\" as const,\n  MEDIUM: \"medium\" as const,\n  HIGH: \"high\" as const,\n  URGENT: \"urgent\" as const,\n} as const;\n\nexport const ProjectStatus = {\n  ACTIVE: \"active\" as const,\n  ARCHIVED: \"archived\" as const,\n} as const;\n\nexport type TaskStatusType = typeof TaskStatus[keyof typeof TaskStatus];\nexport type TaskPriorityType = typeof TaskPriority[keyof typeof TaskPriority];\nexport type ProjectStatusType = typeof ProjectStatus[keyof typeof ProjectStatus];\n\n// User schema (keeping the existing one)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;","size_bytes":3455},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { ThemeProvider } from \"@/lib/theme\";\nimport AppSidebar from \"@/components/AppSidebar\";\nimport { ThemeToggle } from \"@/components/ThemeToggle\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport KanbanView from \"@/pages/KanbanView\";\nimport TaskList from \"@/pages/TaskList\";\nimport NotFound from \"@/pages/NotFound\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/kanban\" component={KanbanView} />\n      <Route path=\"/projects\" component={() => <div className=\"p-6\">项目页面开发中...</div>} />\n      <Route path=\"/tasks\" component={TaskList} />\n      <Route path=\"/analytics\" component={() => <div className=\"p-6\">统计页面开发中...</div>} />\n      <Route path=\"/settings\" component={() => <div className=\"p-6\">设置页面开发中...</div>} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  const handleCreateProject = () => {\n    console.log(\"Create new project clicked\");\n  };\n\n  const handleCreateTask = () => {\n    console.log(\"Create new task clicked\");\n  };\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"project-manager-theme\">\n        <TooltipProvider>\n          <SidebarProvider style={style as React.CSSProperties}>\n            <div className=\"flex h-screen w-full\" data-testid=\"app-container\">\n              <AppSidebar \n                onCreateProject={handleCreateProject}\n                onCreateTask={handleCreateTask}\n              />\n              <div className=\"flex flex-col flex-1 overflow-hidden\">\n                <header \n                  className=\"flex items-center justify-between p-4 border-b bg-background\"\n                  data-testid=\"app-header\"\n                >\n                  <div className=\"flex items-center gap-4\">\n                    <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n                    <h1 className=\"text-lg font-semibold text-foreground hidden sm:block\">\n                      个人项目管理\n                    </h1>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <ThemeToggle />\n                  </div>\n                </header>\n                <main \n                  className=\"flex-1 overflow-auto p-6 bg-background\"\n                  data-testid=\"app-main\"\n                >\n                  <Router />\n                </main>\n              </div>\n            </div>\n          </SidebarProvider>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":3064},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 220 5% 98%;\n  --foreground: 220 8% 15%;\n  --border: 220 12% 90%;\n\n  --card: 220 4% 96%;\n  --card-foreground: 220 8% 15%;\n  --card-border: 220 10% 88%;\n\n  --sidebar: 220 6% 94%;\n  --sidebar-foreground: 220 8% 15%;\n  --sidebar-border: 220 12% 86%;\n  --sidebar-primary: 220 85% 25%;\n  --sidebar-primary-foreground: 220 90% 95%;\n  --sidebar-accent: 220 12% 85%;\n  --sidebar-accent-foreground: 220 8% 25%;\n  --sidebar-ring: 220 85% 25%;\n\n  --popover: 220 4% 93%;\n  --popover-foreground: 220 8% 15%;\n  --popover-border: 220 12% 85%;\n\n  --primary: 220 85% 25%;\n  --primary-foreground: 220 90% 95%;\n\n  --secondary: 220 8% 87%;\n  --secondary-foreground: 220 8% 20%;\n\n  --muted: 220 10% 90%;\n  --muted-foreground: 220 8% 45%;\n\n  --accent: 220 15% 88%;\n  --accent-foreground: 220 8% 25%;\n\n  --destructive: 0 70% 45%;\n  --destructive-foreground: 0 85% 95%;\n\n  --input: 220 20% 75%;\n  --ring: 220 85% 25%;\n\n  --chart-1: 220 85% 25%;\n  --chart-2: 142 69% 35%;\n  --chart-3: 38 92% 45%;\n  --chart-4: 280 75% 35%;\n  --chart-5: 190 70% 35%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 20% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 20% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 20% 50% / 0.00), 0px 1px 2px -1px hsl(220 20% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 20% 50% / 0.00), 0px 1px 2px -1px hsl(220 20% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 20% 50% / 0.00), 0px 2px 4px -1px hsl(220 20% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 20% 50% / 0.00), 0px 4px 6px -1px hsl(220 20% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 20% 50% / 0.00), 0px 8px 10px -1px hsl(220 20% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 20% 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 5% 8%;\n  --foreground: 220 8% 90%;\n  --border: 220 12% 18%;\n\n  --card: 220 4% 12%;\n  --card-foreground: 220 8% 90%;\n  --card-border: 220 10% 20%;\n\n  --sidebar: 220 6% 10%;\n  --sidebar-foreground: 220 8% 90%;\n  --sidebar-border: 220 12% 18%;\n  --sidebar-primary: 220 85% 75%;\n  --sidebar-primary-foreground: 220 90% 5%;\n  --sidebar-accent: 220 12% 22%;\n  --sidebar-accent-foreground: 220 8% 85%;\n  --sidebar-ring: 220 85% 75%;\n\n  --popover: 220 4% 15%;\n  --popover-foreground: 220 8% 90%;\n  --popover-border: 220 12% 22%;\n\n  --primary: 220 85% 28%;\n  --primary-foreground: 220 90% 95%;\n\n  --secondary: 220 8% 20%;\n  --secondary-foreground: 220 8% 85%;\n\n  --muted: 220 10% 16%;\n  --muted-foreground: 220 8% 65%;\n\n  --accent: 220 15% 18%;\n  --accent-foreground: 220 8% 85%;\n\n  --destructive: 0 70% 35%;\n  --destructive-foreground: 0 85% 95%;\n\n  --input: 220 20% 35%;\n  --ring: 220 85% 75%;\n\n  --chart-1: 220 85% 75%;\n  --chart-2: 142 69% 65%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 280 75% 65%;\n  --chart-5: 190 70% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 20% 10% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 20% 10% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 20% 10% / 0.00), 0px 1px 2px -1px hsl(220 20% 10% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 20% 10% / 0.00), 0px 1px 2px -1px hsl(220 20% 10% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 20% 10% / 0.00), 0px 2px 4px -1px hsl(220 20% 10% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 20% 10% / 0.00), 0px 4px 6px -1px hsl(220 20% 10% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 20% 10% / 0.00), 0px 8px 10px -1px hsl(220 20% 10% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 20% 10% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9807},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AppSidebar.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport {\n  BarChart3,\n  FolderOpen,\n  Kanban,\n  List,\n  Plus,\n  Settings,\n  Home,\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nconst mainItems = [\n  {\n    title: \"仪表板\",\n    url: \"/\",\n    icon: Home,\n    id: \"dashboard\",\n  },\n  {\n    title: \"项目\",\n    url: \"/projects\", \n    icon: FolderOpen,\n    id: \"projects\",\n  },\n  {\n    title: \"看板\",\n    url: \"/kanban\",\n    icon: Kanban,\n    id: \"kanban\", \n  },\n  {\n    title: \"任务列表\",\n    url: \"/tasks\",\n    icon: List,\n    id: \"tasks\",\n  },\n  {\n    title: \"统计\",\n    url: \"/analytics\", \n    icon: BarChart3,\n    id: \"analytics\",\n  },\n];\n\nconst settingsItems = [\n  {\n    title: \"设置\",\n    url: \"/settings\",\n    icon: Settings,\n    id: \"settings\",\n  },\n];\n\ninterface AppSidebarProps {\n  onCreateProject?: () => void;\n  onCreateTask?: () => void;\n}\n\nexport default function AppSidebar({ onCreateProject, onCreateTask }: AppSidebarProps) {\n  const [location] = useLocation();\n\n  const handleCreateProject = () => {\n    onCreateProject?.();\n    console.log(\"Create new project clicked\");\n  };\n\n  const handleCreateTask = () => {\n    onCreateTask?.();\n    console.log(\"Create new task clicked\");\n  };\n\n  return (\n    <Sidebar data-testid=\"app-sidebar\">\n      <SidebarContent>\n        {/* Quick Actions */}\n        <SidebarGroup>\n          <SidebarGroupLabel>快速操作</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <div className=\"space-y-2 px-2\">\n              <Button\n                onClick={handleCreateProject}\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-create-project\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                新建项目\n              </Button>\n              <Button\n                onClick={handleCreateTask}\n                className=\"w-full justify-start\"\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-create-task\"\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                新建任务\n              </Button>\n            </div>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Main Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>导航</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {mainItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                  >\n                    <a \n                      href={item.url}\n                      data-testid={`link-${item.id}`}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Settings */}\n        <SidebarGroup>\n          <SidebarGroupLabel>其他</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {settingsItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton\n                    asChild\n                    isActive={location === item.url}\n                  >\n                    <a \n                      href={item.url}\n                      data-testid={`link-${item.id}`}\n                    >\n                      <item.icon className=\"w-4 h-4\" />\n                      <span>{item.title}</span>\n                    </a>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":4209},"client/src/components/DashboardStats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, Clock, AlertTriangle, FolderOpen } from \"lucide-react\";\nimport { Project, Task } from \"@shared/schema\";\n\ninterface DashboardStatsProps {\n  projects: Project[];\n  tasks: Task[];\n}\n\nexport default function DashboardStats({ projects, tasks }: DashboardStatsProps) {\n  // Calculate statistics\n  const activeProjects = projects.filter(p => p.status === \"active\").length;\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(t => t.status === \"done\").length;\n  const inProgressTasks = tasks.filter(t => t.status === \"in_progress\").length;\n  const overdueTasks = tasks.filter(t => \n    t.dueDate && new Date(t.dueDate) < new Date() && t.status !== \"done\"\n  ).length;\n\n  const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n\n  const stats = [\n    {\n      title: \"活跃项目\",\n      value: activeProjects,\n      icon: FolderOpen,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-100 dark:bg-blue-900/30\",\n      testId: \"stat-active-projects\"\n    },\n    {\n      title: \"已完成任务\", \n      value: completedTasks,\n      icon: CheckCircle,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-100 dark:bg-green-900/30\",\n      testId: \"stat-completed-tasks\"\n    },\n    {\n      title: \"进行中任务\",\n      value: inProgressTasks, \n      icon: Clock,\n      color: \"text-yellow-600\",\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900/30\",\n      testId: \"stat-in-progress-tasks\"\n    },\n    {\n      title: \"逾期任务\",\n      value: overdueTasks,\n      icon: AlertTriangle, \n      color: \"text-red-600\",\n      bgColor: \"bg-red-100 dark:bg-red-900/30\",\n      testId: \"stat-overdue-tasks\"\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {stats.map((stat) => (\n          <Card key={stat.title} data-testid={stat.testId}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {stat.title}\n              </CardTitle>\n              <div className={`p-2 rounded-full ${stat.bgColor}`}>\n                <stat.icon className={`h-4 w-4 ${stat.color}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div \n                className=\"text-2xl font-bold text-foreground\"\n                data-testid={`value-${stat.testId}`}\n              >\n                {stat.value}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Overall Progress */}\n      <Card data-testid=\"card-overall-progress\">\n        <CardHeader>\n          <CardTitle className=\"text-base font-medium\">\n            总体进度\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span className=\"text-muted-foreground\">任务完成率</span>\n              <span \n                className=\"text-foreground font-medium\"\n                data-testid=\"text-completion-rate\"\n              >\n                {completionRate.toFixed(1)}%\n              </span>\n            </div>\n            <Progress \n              value={completionRate} \n              className=\"h-3\"\n              data-testid=\"progress-overall\"\n            />\n          </div>\n          \n          <div className=\"flex justify-between text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n              <span \n                className=\"text-muted-foreground\"\n                data-testid=\"text-completed-count\"\n              >\n                已完成: {completedTasks}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n              <span \n                className=\"text-muted-foreground\"\n                data-testid=\"text-in-progress-count\"\n              >\n                进行中: {inProgressTasks}\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>\n              <span \n                className=\"text-muted-foreground\"\n                data-testid=\"text-remaining-count\"\n              >\n                剩余: {totalTasks - completedTasks - inProgressTasks}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4826},"client/src/components/KanbanColumn.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, FileText } from \"lucide-react\";\nimport TaskCard from \"./TaskCard\";\nimport { Task, TaskStatusType } from \"@shared/schema\";\n\ninterface KanbanColumnProps {\n  title: string;\n  status: TaskStatusType;\n  tasks: Task[];\n  onAddTask?: (status: TaskStatusType) => void;\n  onEditTask?: (task: Task) => void;\n  onDeleteTask?: (taskId: string) => void;\n  onStatusChange?: (taskId: string, newStatus: string) => void;\n}\n\nconst statusConfig = {\n  todo: {\n    title: \"待办\",\n    color: \"bg-gray-100 dark:bg-gray-800\",\n    badgeColor: \"bg-gray-500\",\n  },\n  in_progress: {\n    title: \"进行中\", \n    color: \"bg-blue-50 dark:bg-blue-950/30\",\n    badgeColor: \"bg-blue-500\",\n  },\n  done: {\n    title: \"已完成\",\n    color: \"bg-green-50 dark:bg-green-950/30\", \n    badgeColor: \"bg-green-500\",\n  },\n};\n\nexport default function KanbanColumn({\n  title,\n  status,\n  tasks,\n  onAddTask,\n  onEditTask,\n  onDeleteTask,\n  onStatusChange,\n}: KanbanColumnProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const config = statusConfig[status] || statusConfig.todo;\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n    console.log(`DragOver on ${status}`);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // Only set false if leaving the drop zone itself, not child elements\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n      setIsDragOver(false);\n      console.log(`DragLeave from ${status}`);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n    \n    console.log(`Drop event triggered on ${status}`);\n    const taskId = e.dataTransfer.getData(\"text/plain\");\n    console.log(`Task ID from dataTransfer: ${taskId}`);\n    \n    if (taskId && onStatusChange) {\n      console.log(`Calling onStatusChange for task ${taskId} -> ${status}`);\n      onStatusChange(taskId, status);\n      console.log(`Task ${taskId} moved to ${status}`);\n    } else {\n      console.warn('Drop event: missing taskId or onStatusChange handler');\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col min-h-0\">\n      {/* Column Header */}\n      <Card className={`${config.color} border-2 mb-4`}>\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center justify-between text-sm font-medium\">\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${config.badgeColor}`}></div>\n              <span data-testid={`text-column-title-${status}`}>{title}</span>\n              <Badge \n                variant=\"secondary\" \n                className=\"text-xs\"\n                data-testid={`badge-task-count-${status}`}\n              >\n                {tasks.length}\n              </Badge>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onAddTask?.(status)}\n              data-testid={`button-add-task-${status}`}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </CardTitle>\n        </CardHeader>\n      </Card>\n\n      {/* Drop Zone */}\n      <div\n        className={`flex-1 min-h-[200px] p-2 rounded-lg border-2 border-dashed transition-all ${\n          isDragOver \n            ? \"border-primary bg-primary/10\" \n            : \"border-transparent\"\n        }`}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onDrop={handleDrop}\n        data-testid={`drop-zone-${status}`}\n      >\n        <div className=\"space-y-3\">\n          {tasks.map((task) => (\n            <div\n              key={task.id}\n              draggable\n              className=\"cursor-grab active:cursor-grabbing\"\n              onDragStart={(e) => {\n                console.log(`DragStart event for task: ${task.id}`);\n                e.dataTransfer.setData(\"text/plain\", task.id);\n                e.dataTransfer.effectAllowed = \"move\";\n                console.log(`DataTransfer set: ${task.id}`);\n              }}\n              onDragEnd={(e) => {\n                console.log(`DragEnd event for task: ${task.id}`);\n              }}\n              data-testid={`draggable-task-${task.id}`}\n            >\n              <TaskCard\n                task={task}\n                onEdit={onEditTask}\n                onDelete={onDeleteTask}\n                onStatusChange={onStatusChange}\n              />\n            </div>\n          ))}\n          \n          {tasks.length === 0 && (\n            <div \n              className=\"flex flex-col items-center justify-center py-8 text-muted-foreground\"\n              data-testid={`empty-state-${status}`}\n            >\n              <FileText className=\"w-8 h-8 mb-2\" />\n              <p className=\"text-sm text-center\">\n                {status === \"todo\" && \"暂无待办任务\"}\n                {status === \"in_progress\" && \"暂无进行中任务\"}  \n                {status === \"done\" && \"暂无已完成任务\"}\n              </p>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"mt-2\"\n                onClick={() => onAddTask?.(status)}\n                data-testid={`button-add-first-task-${status}`}\n              >\n                <Plus className=\"h-4 w-4 mr-1\" />\n                添加任务\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5712},"client/src/components/ProjectCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar, MoreHorizontal, FolderOpen } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Project, Task } from \"@shared/schema\";\n\ninterface ProjectCardProps {\n  project: Project;\n  tasks?: Task[];\n  onEdit?: (project: Project) => void;\n  onDelete?: (projectId: string) => void;\n  onOpen?: (projectId: string) => void;\n}\n\nexport default function ProjectCard({ \n  project, \n  tasks = [], \n  onEdit, \n  onDelete, \n  onOpen \n}: ProjectCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Calculate project statistics\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(task => task.status === \"done\").length;\n  const progressPercentage = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;\n  const inProgressTasks = tasks.filter(task => task.status === \"in_progress\").length;\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return null;\n    return new Intl.DateTimeFormat('zh-CN', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    }).format(date);\n  };\n\n  const handleOpen = () => {\n    onOpen?.(project.id);\n    console.log(`Opening project: ${project.id}`);\n  };\n\n  return (\n    <Card \n      className=\"hover-elevate cursor-pointer transition-all duration-200\"\n      onClick={() => setIsExpanded(!isExpanded)}\n      data-testid={`card-project-${project.id}`}\n    >\n      <CardHeader className=\"flex flex-row items-start justify-between space-y-0 pb-2\">\n        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n          <FolderOpen className=\"w-5 h-5 text-primary flex-shrink-0\" />\n          <h3 \n            className=\"font-medium text-base text-foreground leading-tight truncate\" \n            data-testid={`text-project-title-${project.id}`}\n          >\n            {project.name}\n          </h3>\n        </div>\n        <div className=\"flex items-center gap-2 ml-2\">\n          <Badge \n            variant={project.status === \"active\" ? \"default\" : \"secondary\"}\n            data-testid={`badge-status-${project.id}`}\n          >\n            {project.status === \"active\" ? \"进行中\" : \"已归档\"}\n          </Badge>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"h-8 w-8\"\n                data-testid={`button-project-menu-${project.id}`}\n              >\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleOpen();\n                }}\n                data-testid={`button-open-${project.id}`}\n              >\n                打开项目\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit?.(project);\n                }}\n                data-testid={`button-edit-${project.id}`}\n              >\n                编辑项目\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  onDelete?.(project.id);\n                }}\n                className=\"text-destructive\"\n                data-testid={`button-delete-${project.id}`}\n              >\n                删除项目\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          {/* Project Progress */}\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center text-sm\">\n              <span className=\"text-muted-foreground\">进度</span>\n              <span className=\"text-foreground font-medium\" data-testid={`text-progress-${project.id}`}>\n                {completedTasks}/{totalTasks} 任务完成\n              </span>\n            </div>\n            <Progress \n              value={progressPercentage} \n              className=\"h-2\"\n              data-testid={`progress-bar-${project.id}`}\n            />\n          </div>\n\n          {/* Task Summary */}\n          <div className=\"flex gap-4 text-sm\">\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 rounded-full bg-yellow-500\"></div>\n              <span className=\"text-muted-foreground\" data-testid={`text-in-progress-${project.id}`}>\n                {inProgressTasks} 进行中\n              </span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n              <span className=\"text-muted-foreground\" data-testid={`text-completed-${project.id}`}>\n                {completedTasks} 已完成\n              </span>\n            </div>\n          </div>\n\n          {/* Due Date */}\n          {project.dueDate && (\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n              <Calendar className=\"w-4 h-4\" />\n              <span data-testid={`text-due-date-${project.id}`}>\n                截止: {formatDate(new Date(project.dueDate))}\n              </span>\n            </div>\n          )}\n\n          {/* Expanded Description */}\n          {isExpanded && project.description && (\n            <p \n              className=\"text-sm text-muted-foreground leading-relaxed border-t pt-3\" \n              data-testid={`text-project-description-${project.id}`}\n            >\n              {project.description}\n            </p>\n          )}\n\n          {/* Action Button */}\n          <Button \n            onClick={(e) => {\n              e.stopPropagation();\n              handleOpen();\n            }}\n            className=\"w-full mt-3\"\n            variant=\"outline\"\n            data-testid={`button-open-project-${project.id}`}\n          >\n            打开项目\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6487},"client/src/components/SearchBar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, X } from \"lucide-react\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\n\ninterface SearchBarProps {\n  placeholder?: string;\n  onSearch?: (query: string) => void;\n  onClear?: () => void;\n  className?: string;\n}\n\nexport default function SearchBar({ \n  placeholder = \"搜索项目和任务...\", \n  onSearch,\n  onClear,\n  className = \"\"\n}: SearchBarProps) {\n  const [query, setQuery] = useState(\"\");\n  const debouncedQuery = useDebounce(query, 300);\n\n  // Trigger search when debounced query changes\n  useEffect(() => {\n    onSearch?.(debouncedQuery);\n    console.log(\"Debounced search for:\", debouncedQuery);\n  }, [debouncedQuery, onSearch]);\n\n  const handleInputChange = (value: string) => {\n    setQuery(value);\n    console.log(\"Input changed:\", value);\n  };\n\n  const handleClear = () => {\n    setQuery(\"\");\n    onClear?.();\n    console.log(\"Search cleared\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      // Force immediate search on Enter\n      onSearch?.(query);\n      console.log(\"Immediate search for:\", query);\n    }\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          type=\"search\"\n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => handleInputChange(e.target.value)}\n          onKeyPress={handleKeyPress}\n          className=\"pl-9 pr-9\"\n          data-testid=\"input-search\"\n        />\n        {query && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-6 w-6\"\n            onClick={handleClear}\n            data-testid=\"button-clear-search\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n      {query && (\n        <div className=\"absolute top-full left-0 right-0 mt-1 p-2 bg-popover border rounded-md shadow-lg z-50\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-search-results\">\n            搜索: \"{query}\"\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2376},"client/src/components/TaskCard.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, Flag, MoreHorizontal } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Task, TaskPriority, TaskStatus } from \"@shared/schema\";\n\ninterface TaskCardProps {\n  task: Task;\n  onEdit?: (task: Task) => void;\n  onDelete?: (taskId: string) => void;\n  onStatusChange?: (taskId: string, status: string) => void;\n}\n\nconst priorityColors: Record<string, string> = {\n  [TaskPriority.LOW]: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\",\n  [TaskPriority.MEDIUM]: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300\",\n  [TaskPriority.HIGH]: \"bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300\",\n  [TaskPriority.URGENT]: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300\",\n};\n\nconst statusColors: Record<string, string> = {\n  [TaskStatus.TODO]: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\",\n  [TaskStatus.IN_PROGRESS]: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\",\n  [TaskStatus.DONE]: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\",\n};\n\nexport default function TaskCard({ task, onEdit, onDelete, onStatusChange }: TaskCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  const handleStatusChange = (newStatus: string) => {\n    onStatusChange?.(task.id, newStatus);\n    console.log(`Task ${task.id} status changed to ${newStatus}`);\n  };\n\n  const formatDate = (date: Date | null) => {\n    if (!date) return null;\n    return new Intl.DateTimeFormat('zh-CN', {\n      month: 'short',\n      day: 'numeric',\n    }).format(date);\n  };\n\n  return (\n    <Card \n      className=\"hover-elevate cursor-pointer transition-all duration-200\"\n      onClick={() => setIsExpanded(!isExpanded)}\n      data-testid={`card-task-${task.id}`}\n    >\n      <CardHeader className=\"flex flex-row items-start justify-between space-y-0 pb-2\">\n        <div className=\"flex-1 min-w-0\">\n          <h3 \n            className=\"font-medium text-sm text-foreground leading-tight\" \n            data-testid={`text-task-title-${task.id}`}\n          >\n            {task.title}\n          </h3>\n        </div>\n        <div className=\"flex items-center gap-2 ml-2\">\n          <Badge \n            variant=\"secondary\" \n            className={priorityColors[task.priority]}\n            data-testid={`badge-priority-${task.id}`}\n          >\n            <Flag className=\"w-3 h-3 mr-1\" />\n            {task.priority}\n          </Badge>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\n              <Button \n                variant=\"ghost\" \n                size=\"icon\" \n                className=\"h-8 w-8\"\n                data-testid={`button-task-menu-${task.id}`}\n              >\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleStatusChange(TaskStatus.TODO);\n                }}\n                data-testid={`button-status-todo-${task.id}`}\n              >\n                标记为待办\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleStatusChange(TaskStatus.IN_PROGRESS);\n                }}\n                data-testid={`button-status-progress-${task.id}`}\n              >\n                标记为进行中\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  handleStatusChange(TaskStatus.DONE);\n                }}\n                data-testid={`button-status-done-${task.id}`}\n              >\n                标记为完成\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  onEdit?.(task);\n                }}\n                data-testid={`button-edit-${task.id}`}\n              >\n                编辑任务\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={(e) => {\n                  e.stopPropagation();\n                  onDelete?.(task.id);\n                }}\n                className=\"text-destructive\"\n                data-testid={`button-delete-${task.id}`}\n              >\n                删除任务\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"flex items-center justify-between\">\n          <Badge \n            variant=\"outline\" \n            className={statusColors[task.status]}\n            data-testid={`badge-status-${task.id}`}\n          >\n            {task.status === TaskStatus.TODO && \"待办\"}\n            {task.status === TaskStatus.IN_PROGRESS && \"进行中\"}\n            {task.status === TaskStatus.DONE && \"已完成\"}\n          </Badge>\n          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n            {task.dueDate && (\n              <div className=\"flex items-center gap-1\" data-testid={`text-due-date-${task.id}`}>\n                <Calendar className=\"w-3 h-3\" />\n                {formatDate(new Date(task.dueDate))}\n              </div>\n            )}\n            {task.estimatedHours && (\n              <div className=\"flex items-center gap-1\" data-testid={`text-estimated-hours-${task.id}`}>\n                <Clock className=\"w-3 h-3\" />\n                {task.estimatedHours}h\n              </div>\n            )}\n          </div>\n        </div>\n        {isExpanded && task.description && (\n          <p \n            className=\"text-sm text-muted-foreground mt-2 leading-relaxed\" \n            data-testid={`text-task-description-${task.id}`}\n          >\n            {task.description}\n          </p>\n        )}\n        {task.tags && task.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-1 mt-2\">\n            {task.tags.map((tag, index) => (\n              <Badge \n                key={index} \n                variant=\"outline\" \n                className=\"text-xs px-2 py-0\"\n                data-testid={`badge-tag-${tag}-${task.id}`}\n              >\n                {tag}\n              </Badge>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6793},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/lib/theme\";\n\nexport function ThemeToggle() {\n  const { setTheme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          data-testid=\"button-theme-toggle\"\n        >\n          <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">切换主题</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          data-testid=\"button-theme-light\"\n        >\n          浅色\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          data-testid=\"button-theme-dark\"\n        >\n          深色\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          data-testid=\"button-theme-system\"\n        >\n          跟随系统\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1468},"client/src/hooks/use-debounce.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}","size_bytes":385},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { Project, Task, Tag, InsertProject, InsertTask, InsertTag } from \"@shared/schema\";\n\nconst API_BASE = \"/api\";\n\n// Generic API request function\nasync function apiRequest<T>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const response = await fetch(`${API_BASE}${endpoint}`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options.headers,\n    },\n    ...options,\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n  }\n\n  return response.json();\n}\n\n// Project API functions\nexport const projectApi = {\n  getAll: (): Promise<Project[]> => \n    apiRequest<Project[]>(\"/projects\"),\n  \n  getById: (id: string): Promise<Project> => \n    apiRequest<Project>(`/projects/${id}`),\n  \n  create: (project: InsertProject): Promise<Project> => \n    apiRequest<Project>(\"/projects\", {\n      method: \"POST\",\n      body: JSON.stringify(project),\n    }),\n  \n  update: (id: string, updates: Partial<InsertProject>): Promise<Project> => \n    apiRequest<Project>(`/projects/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(updates),\n    }),\n  \n  delete: (id: string): Promise<void> => \n    apiRequest<void>(`/projects/${id}`, {\n      method: \"DELETE\",\n    }),\n};\n\n// Task API functions\nexport const taskApi = {\n  getAll: (projectId?: string): Promise<Task[]> => {\n    const params = projectId ? `?projectId=${projectId}` : \"\";\n    return apiRequest<Task[]>(`/tasks${params}`);\n  },\n  \n  getById: (id: string): Promise<Task> => \n    apiRequest<Task>(`/tasks/${id}`),\n  \n  create: (task: InsertTask): Promise<Task> => \n    apiRequest<Task>(\"/tasks\", {\n      method: \"POST\",\n      body: JSON.stringify(task),\n    }),\n  \n  update: (id: string, updates: Partial<InsertTask>): Promise<Task> => \n    apiRequest<Task>(`/tasks/${id}`, {\n      method: \"PUT\",\n      body: JSON.stringify(updates),\n    }),\n  \n  updateStatus: (id: string, status: string): Promise<Task> => \n    apiRequest<Task>(`/tasks/${id}/status`, {\n      method: \"PATCH\",\n      body: JSON.stringify({ status }),\n    }),\n  \n  delete: (id: string): Promise<void> => \n    apiRequest<void>(`/tasks/${id}`, {\n      method: \"DELETE\",\n    }),\n};\n\n// Tag API functions\nexport const tagApi = {\n  getAll: (): Promise<Tag[]> => \n    apiRequest<Tag[]>(\"/tags\"),\n  \n  create: (tag: InsertTag): Promise<Tag> => \n    apiRequest<Tag>(\"/tags\", {\n      method: \"POST\",\n      body: JSON.stringify(tag),\n    }),\n};\n\n// Search API functions\nexport const searchApi = {\n  tasks: (query: string): Promise<Task[]> => \n    apiRequest<Task[]>(`/search/tasks?q=${encodeURIComponent(query)}`),\n  \n  projects: (query: string): Promise<Project[]> => \n    apiRequest<Project[]>(`/search/projects?q=${encodeURIComponent(query)}`),\n};\n\n// Health check\nexport const healthApi = {\n  check: (): Promise<{ status: string; timestamp: string }> => \n    apiRequest(\"/health\"),\n};","size_bytes":2953},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1599},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport DashboardStats from \"@/components/DashboardStats\";\nimport ProjectCard from \"@/components/ProjectCard\";\nimport TaskCard from \"@/components/TaskCard\";\nimport SearchBar from \"@/components/SearchBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Calendar, Clock, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Project, Task, TaskStatus, TaskPriority } from \"@shared/schema\";\nimport { projectApi, taskApi, searchApi } from \"@/lib/api\";\n\nexport default function Dashboard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch projects and tasks from API\n  const { \n    data: projects = [], \n    isLoading: projectsLoading, \n    error: projectsError,\n    refetch: refetchProjects \n  } = useQuery({\n    queryKey: [\"/api/projects\"],\n    queryFn: projectApi.getAll,\n  });\n\n  const { \n    data: tasks = [], \n    isLoading: tasksLoading,\n    error: tasksError,\n    refetch: refetchTasks \n  } = useQuery({\n    queryKey: [\"/api/tasks\"],\n    queryFn: () => taskApi.getAll(),\n  });\n\n  const { data: searchResults, isLoading: searchLoading } = useQuery({\n    queryKey: [\"/api/search\", searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return { projects: [], tasks: [] };\n      const [searchedProjects, searchedTasks] = await Promise.all([\n        searchApi.projects(searchQuery),\n        searchApi.tasks(searchQuery),\n      ]);\n      return { projects: searchedProjects, tasks: searchedTasks };\n    },\n    enabled: searchQuery.length > 0,\n  });\n\n  // Mutations for task operations\n  const updateTaskStatusMutation = useMutation({\n    mutationFn: ({ taskId, status }: { taskId: string; status: string }) =>\n      taskApi.updateStatus(taskId, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务状态已更新\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"更新失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: taskApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务已删除\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"删除失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteProjectMutation = useMutation({\n    mutationFn: projectApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"项目已删除\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"删除失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Filter data based on search\n  const filteredProjects = searchQuery \n    ? (searchResults?.projects || [])\n    : projects;\n\n  const filteredTasks = searchQuery \n    ? (searchResults?.tasks || [])\n    : tasks;\n\n  const recentTasks = [...tasks]\n    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())\n    .slice(0, 5);\n\n  const upcomingTasks = [...tasks]\n    .filter(task => task.dueDate && new Date(task.dueDate) > new Date() && task.status !== TaskStatus.DONE)\n    .sort((a, b) => new Date(a.dueDate!).getTime() - new Date(b.dueDate!).getTime())\n    .slice(0, 3);\n\n  const handleCreateProject = () => {\n    console.log(\"Create new project\");\n    // todo: implement project creation modal\n  };\n\n  const handleCreateTask = () => {\n    console.log(\"Create new task\");\n    // todo: implement task creation modal\n  };\n\n  const handleEditTask = (task: Task) => {\n    console.log(\"Edit task:\", task);\n    // todo: implement task editing modal\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  const handleTaskStatusChange = (taskId: string, status: string) => {\n    updateTaskStatusMutation.mutate({ taskId, status });\n  };\n\n  const handleEditProject = (project: Project) => {\n    console.log(\"Edit project:\", project);\n    // todo: implement project editing modal\n  };\n\n  const handleDeleteProject = (projectId: string) => {\n    deleteProjectMutation.mutate(projectId);\n  };\n\n  const handleOpenProject = (projectId: string) => {\n    console.log(\"Open project:\", projectId);\n    // todo: navigate to project detail page\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-dashboard\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">\n            项目管理仪表板\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-dashboard-subtitle\">\n            管理您的项目和任务，跟踪进度\n          </p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={handleCreateProject} data-testid=\"button-create-project\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            新建项目\n          </Button>\n          <Button variant=\"outline\" onClick={handleCreateTask} data-testid=\"button-create-task\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            新建任务\n          </Button>\n        </div>\n      </div>\n\n      {/* Search */}\n      <SearchBar\n        placeholder=\"搜索项目和任务...\"\n        onSearch={setSearchQuery}\n        onClear={() => setSearchQuery(\"\")}\n        className=\"max-w-md\"\n      />\n\n      {/* Loading State */}\n      {(projectsLoading || tasksLoading) && (\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n          <span className=\"text-muted-foreground\">加载中...</span>\n        </div>\n      )}\n\n      {/* Error State */}\n      {(projectsError || tasksError) && (\n        <Card className=\"border-destructive\" data-testid=\"card-error\">\n          <CardContent className=\"flex flex-col items-center py-8\">\n            <div className=\"text-destructive mb-4\">\n              <h3 className=\"text-lg font-semibold\">数据加载失败</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {projectsError && \"项目数据: \" + (projectsError as Error).message}\n                {projectsError && tasksError && \" | \"}\n                {tasksError && \"任务数据: \" + (tasksError as Error).message}\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              {projectsError && (\n                <Button \n                  variant=\"outline\" \n                  onClick={() => refetchProjects()}\n                  data-testid=\"button-retry-projects\"\n                >\n                  重试加载项目\n                </Button>\n              )}\n              {tasksError && (\n                <Button \n                  variant=\"outline\" \n                  onClick={() => refetchTasks()}\n                  data-testid=\"button-retry-tasks\"\n                >\n                  重试加载任务\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Statistics */}\n      {!projectsLoading && !tasksLoading && (\n        <DashboardStats projects={projects} tasks={tasks} />\n      )}\n\n      {/* Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Projects */}\n        <Card data-testid=\"card-recent-projects\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"text-lg font-medium\">\n              最近项目\n            </CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-projects\">\n              查看全部\n            </Button>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {filteredProjects.length > 0 ? (\n              filteredProjects.slice(0, 2).map((project) => (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  tasks={tasks.filter(t => t.projectId === project.id)}\n                  onEdit={handleEditProject}\n                  onDelete={handleDeleteProject}\n                  onOpen={handleOpenProject}\n                />\n              ))\n            ) : (\n              <p className=\"text-muted-foreground text-center py-4\" data-testid=\"text-no-projects\">\n                {searchQuery ? \"未找到匹配的项目\" : \"暂无项目\"}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Tasks */}\n        <Card data-testid=\"card-recent-tasks\">\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"text-lg font-medium\">\n              最近任务\n            </CardTitle>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-tasks\">\n              查看全部\n            </Button>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {filteredTasks.length > 0 ? (\n              recentTasks.slice(0, 3).map((task) => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onEdit={handleEditTask}\n                  onDelete={handleDeleteTask}\n                  onStatusChange={handleTaskStatusChange}\n                />\n              ))\n            ) : (\n              <p className=\"text-muted-foreground text-center py-4\" data-testid=\"text-no-tasks\">\n                {searchQuery ? \"未找到匹配的任务\" : \"暂无任务\"}\n              </p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upcoming Tasks */}\n      {upcomingTasks.length > 0 && (\n        <Card data-testid=\"card-upcoming-tasks\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-medium flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              即将到期的任务\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {upcomingTasks.map((task) => (\n                <div key={task.id} className=\"border rounded-lg p-3 space-y-2\">\n                  <h4 className=\"font-medium text-sm\" data-testid={`text-upcoming-task-${task.id}`}>\n                    {task.title}\n                  </h4>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                    <Clock className=\"w-3 h-3\" />\n                    <span data-testid={`text-upcoming-due-${task.id}`}>\n                      {task.dueDate && new Intl.DateTimeFormat('zh-CN', {\n                        month: 'short',\n                        day: 'numeric',\n                        hour: '2-digit',\n                        minute: '2-digit',\n                      }).format(new Date(task.dueDate))}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11532},"client/src/pages/KanbanView.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport KanbanColumn from \"@/components/KanbanColumn\";\nimport SearchBar from \"@/components/SearchBar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Filter, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Task, TaskStatus, TaskPriority, TaskStatusType } from \"@shared/schema\";\nimport { taskApi, searchApi } from \"@/lib/api\";\n\nexport default function KanbanView() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedProject, setSelectedProject] = useState<string | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch tasks from API\n  const { \n    data: allTasks = [], \n    isLoading: tasksLoading,\n    error: tasksError,\n    refetch: refetchTasks \n  } = useQuery({\n    queryKey: [\"/api/tasks\"],\n    queryFn: () => taskApi.getAll(),\n  });\n\n  const { data: searchResults, isLoading: searchLoading } = useQuery({\n    queryKey: [\"/api/search/tasks\", searchQuery],\n    queryFn: async () => {\n      if (!searchQuery.trim()) return [];\n      return searchApi.tasks(searchQuery);\n    },\n    enabled: searchQuery.length > 0,\n  });\n\n  // Mutations for task operations\n  const updateTaskStatusMutation = useMutation({\n    mutationFn: ({ taskId, status }: { taskId: string; status: string }) =>\n      taskApi.updateStatus(taskId, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务状态已更新\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"更新失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: taskApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务已删除\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"删除失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Get tasks to display based on search\n  const tasks = searchQuery && searchResults ? searchResults : allTasks;\n\n  // Filter tasks based on project selection\n  const filteredTasks = selectedProject \n    ? tasks.filter(task => task.projectId === selectedProject)\n    : tasks;\n\n  // Group tasks by status\n  const todoTasks = filteredTasks.filter(task => task.status === TaskStatus.TODO);\n  const inProgressTasks = filteredTasks.filter(task => task.status === TaskStatus.IN_PROGRESS);\n  const doneTasks = filteredTasks.filter(task => task.status === TaskStatus.DONE);\n\n  const handleAddTask = (status: TaskStatusType) => {\n    console.log(`Add new task with status: ${status}`);\n    // todo: implement task creation modal\n  };\n\n  const handleEditTask = (task: Task) => {\n    console.log(\"Edit task:\", task);\n    // todo: implement task editing modal\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  const handleStatusChange = (taskId: string, newStatus: string) => {\n    updateTaskStatusMutation.mutate({ taskId, status: newStatus });\n  };\n\n  const projects = Array.from(new Set(allTasks.map(task => task.projectId)));\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-kanban\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-kanban-title\">\n            任务看板\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-kanban-subtitle\">\n            拖拽任务卡片来更新状态\n          </p>\n        </div>\n        <Button onClick={() => handleAddTask(TaskStatus.TODO)} data-testid=\"button-add-task\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          新建任务\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card data-testid=\"card-filters\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n            <Filter className=\"w-4 h-4\" />\n            筛选和搜索\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <SearchBar\n              placeholder=\"搜索任务...\"\n              onSearch={setSearchQuery}\n              onClear={() => setSearchQuery(\"\")}\n              className=\"flex-1\"\n            />\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">项目:</span>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant={selectedProject === null ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedProject(null)}\n                  data-testid=\"button-filter-all\"\n                >\n                  全部\n                </Button>\n                {projects.map(projectId => (\n                  <Button\n                    key={projectId}\n                    variant={selectedProject === projectId ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setSelectedProject(projectId)}\n                    data-testid={`button-filter-${projectId}`}\n                  >\n                    {projectId}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Loading State */}\n      {tasksLoading && (\n        <div className=\"flex items-center justify-center py-8\">\n          <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n          <span className=\"text-muted-foreground\">加载任务中...</span>\n        </div>\n      )}\n\n      {/* Error State */}\n      {tasksError && (\n        <Card className=\"border-destructive\" data-testid=\"card-error\">\n          <CardContent className=\"flex flex-col items-center py-8\">\n            <div className=\"text-destructive mb-4\">\n              <h3 className=\"text-lg font-semibold\">任务数据加载失败</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {(tasksError as Error).message}\n              </p>\n            </div>\n            <Button \n              variant=\"outline\" \n              onClick={() => refetchTasks()}\n              data-testid=\"button-retry-tasks\"\n            >\n              重试加载任务\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Stats Summary */}\n      {!tasksLoading && (\n        <div className=\"flex gap-4 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-gray-400\"></div>\n            <span className=\"text-muted-foreground\" data-testid=\"text-todo-count\">\n              待办: {todoTasks.length}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n            <span className=\"text-muted-foreground\" data-testid=\"text-in-progress-count\">\n              进行中: {inProgressTasks.length}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n            <span className=\"text-muted-foreground\" data-testid=\"text-done-count\">\n              已完成: {doneTasks.length}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Kanban Board */}\n      {!tasksLoading && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 min-h-[600px]\" data-testid=\"kanban-board\">\n          <KanbanColumn\n            title=\"待办\"\n            status={TaskStatus.TODO}\n            tasks={todoTasks}\n            onAddTask={handleAddTask}\n            onEditTask={handleEditTask}\n            onDeleteTask={handleDeleteTask}\n            onStatusChange={handleStatusChange}\n          />\n          <KanbanColumn\n            title=\"进行中\"\n            status={TaskStatus.IN_PROGRESS}\n            tasks={inProgressTasks}\n            onAddTask={handleAddTask}\n            onEditTask={handleEditTask}\n            onDeleteTask={handleDeleteTask}\n            onStatusChange={handleStatusChange}\n          />\n          <KanbanColumn\n            title=\"已完成\"\n            status={TaskStatus.DONE}\n            tasks={doneTasks}\n            onAddTask={handleAddTask}\n            onEditTask={handleEditTask}\n            onDeleteTask={handleDeleteTask}\n            onStatusChange={handleStatusChange}\n          />\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8889},"client/src/pages/NotFound.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Home, ArrowLeft } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  const handleGoHome = () => {\n    setLocation(\"/\");\n  };\n\n  const handleGoBack = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\" data-testid=\"page-not-found\">\n      <Card className=\"max-w-md w-full\">\n        <CardHeader className=\"text-center\">\n          <div className=\"text-6xl mb-4\" data-testid=\"icon-404\">🔍</div>\n          <CardTitle className=\"text-2xl font-bold\" data-testid=\"text-404-title\">\n            页面未找到\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <p className=\"text-muted-foreground\" data-testid=\"text-404-description\">\n            抱歉，您访问的页面不存在或已被移动。\n          </p>\n          <div className=\"flex gap-2 justify-center\">\n            <Button \n              onClick={handleGoHome}\n              data-testid=\"button-go-home\"\n            >\n              <Home className=\"w-4 h-4 mr-2\" />\n              返回首页\n            </Button>\n            <Button \n              variant=\"outline\" \n              onClick={handleGoBack}\n              data-testid=\"button-go-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              返回上页\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1655},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AppSidebar.tsx":{"content":"import AppSidebar from \"../AppSidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar\n          onCreateProject={() => console.log(\"Create project\")}\n          onCreateTask={() => console.log(\"Create task\")}\n        />\n        <div className=\"flex-1 p-4\">\n          <p className=\"text-muted-foreground\">主内容区域</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":667},"client/src/components/examples/DashboardStats.tsx":{"content":"import DashboardStats from \"../DashboardStats\";\nimport { Project, Task, TaskStatus, TaskPriority } from \"@shared/schema\";\n\nconst mockProjects: Project[] = [\n  {\n    id: \"proj-1\",\n    name: \"网站重设计\",\n    description: \"重新设计公司官网\",\n    status: \"active\",\n    dueDate: new Date(\"2025-03-01\"),\n    createdAt: new Date(\"2025-01-01\"),\n  },\n  {\n    id: \"proj-2\", \n    name: \"移动应用开发\",\n    description: \"开发移动端应用\",\n    status: \"active\",\n    dueDate: new Date(\"2025-04-15\"),\n    createdAt: new Date(\"2025-01-15\"),\n  },\n  {\n    id: \"proj-3\",\n    name: \"旧项目归档\",\n    description: \"已完成的项目\",\n    status: \"archived\",\n    dueDate: null,\n    createdAt: new Date(\"2024-12-01\"),\n  },\n];\n\nconst mockTasks: Task[] = [\n  {\n    id: \"task-1\",\n    projectId: \"proj-1\",\n    title: \"设计首页\",\n    description: \"创建新的首页设计\",\n    status: TaskStatus.DONE,\n    priority: TaskPriority.HIGH,\n    dueDate: new Date(\"2025-01-20\"),\n    estimatedHours: 8,\n    actualHours: 6,\n    tags: [\"设计\"],\n    createdAt: new Date(\"2025-01-01\"),\n    updatedAt: new Date(\"2025-01-05\"),\n  },\n  {\n    id: \"task-2\", \n    projectId: \"proj-1\",\n    title: \"开发响应式布局\",\n    description: \"实现移动端适配\",\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    dueDate: new Date(\"2025-01-25\"),\n    estimatedHours: 12,\n    actualHours: null,\n    tags: [\"开发\", \"响应式\"],\n    createdAt: new Date(\"2025-01-10\"),\n    updatedAt: new Date(\"2025-01-15\"),\n  },\n  {\n    id: \"task-3\",\n    projectId: \"proj-2\", \n    title: \"API接口设计\",\n    description: \"设计移动端API\",\n    status: TaskStatus.TODO,\n    priority: TaskPriority.HIGH,\n    dueDate: new Date(\"2025-01-10\"), // 过期任务\n    estimatedHours: 6,\n    actualHours: null,\n    tags: [\"API\", \"后端\"],\n    createdAt: new Date(\"2025-01-05\"),\n    updatedAt: new Date(\"2025-01-05\"),\n  },\n  {\n    id: \"task-4\",\n    projectId: \"proj-2\",\n    title: \"用户界面设计\",\n    description: \"设计移动端界面\",\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    dueDate: new Date(\"2025-02-01\"),\n    estimatedHours: 10,\n    actualHours: null,\n    tags: [\"设计\", \"UI\"],\n    createdAt: new Date(\"2025-01-12\"),\n    updatedAt: new Date(\"2025-01-16\"),\n  },\n];\n\nexport default function DashboardStatsExample() {\n  return (\n    <div className=\"max-w-4xl p-4\">\n      <DashboardStats projects={mockProjects} tasks={mockTasks} />\n    </div>\n  );\n}","size_bytes":2493},"client/src/components/examples/KanbanColumn.tsx":{"content":"import KanbanColumn from \"../KanbanColumn\";\nimport { Task, TaskStatus, TaskPriority } from \"@shared/schema\";\n\nconst mockTasks: Task[] = [\n  {\n    id: \"task-1\",\n    projectId: \"proj-1\",\n    title: \"设计用户界面\",\n    description: \"创建应用的基础UI设计\",\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.HIGH,\n    dueDate: new Date(\"2025-01-20\"),\n    estimatedHours: 6,\n    actualHours: null,\n    tags: [\"设计\", \"UI\"],\n    createdAt: new Date(\"2025-01-10\"),\n    updatedAt: new Date(\"2025-01-15\"),\n  },\n  {\n    id: \"task-2\",\n    projectId: \"proj-1\",\n    title: \"实现API接口\",\n    description: \"开发后端API接口\",\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.MEDIUM,\n    dueDate: new Date(\"2025-01-25\"),\n    estimatedHours: 8,\n    actualHours: null,\n    tags: [\"后端\", \"API\"],\n    createdAt: new Date(\"2025-01-12\"),\n    updatedAt: new Date(\"2025-01-16\"),\n  },\n];\n\nexport default function KanbanColumnExample() {\n  return (\n    <div className=\"max-w-sm h-96 p-4\">\n      <KanbanColumn\n        title=\"进行中\"\n        status={TaskStatus.IN_PROGRESS}\n        tasks={mockTasks}\n        onAddTask={(status) => console.log(\"Add task to:\", status)}\n        onEditTask={(task) => console.log(\"Edit task:\", task)}\n        onDeleteTask={(id) => console.log(\"Delete task:\", id)}\n        onStatusChange={(id, status) => console.log(\"Status change:\", id, status)}\n      />\n    </div>\n  );\n}","size_bytes":1434},"client/src/components/examples/ProjectCard.tsx":{"content":"import ProjectCard from \"../ProjectCard\";\nimport { Project, Task, TaskStatus, TaskPriority } from \"@shared/schema\";\n\nconst mockProject: Project = {\n  id: \"proj-1\",\n  name: \"个人项目管理应用\",\n  description: \"开发一个功能完整的个人项目管理工具，支持任务管理、项目跟踪和进度可视化。包含看板视图、列表视图和仪表板功能。\",\n  status: \"active\",\n  dueDate: new Date(\"2025-02-28\"),\n  createdAt: new Date(\"2025-01-01\"),\n};\n\nconst mockTasks: Task[] = [\n  {\n    id: \"task-1\",\n    projectId: \"proj-1\",\n    title: \"设计数据库架构\",\n    description: \"设计项目和任务的数据模型\",\n    status: TaskStatus.DONE,\n    priority: TaskPriority.HIGH,\n    dueDate: new Date(\"2025-01-15\"),\n    estimatedHours: 4,\n    actualHours: 3,\n    tags: [\"后端\", \"数据库\"],\n    createdAt: new Date(\"2025-01-01\"),\n    updatedAt: new Date(\"2025-01-02\"),\n  },\n  {\n    id: \"task-2\",\n    projectId: \"proj-1\",\n    title: \"实现任务看板功能\",\n    description: \"开发拖拽式任务看板\",\n    status: TaskStatus.IN_PROGRESS,\n    priority: TaskPriority.HIGH,\n    dueDate: new Date(\"2025-01-25\"),\n    estimatedHours: 8,\n    actualHours: null,\n    tags: [\"前端\", \"React\"],\n    createdAt: new Date(\"2025-01-10\"),\n    updatedAt: new Date(\"2025-01-15\"),\n  },\n  {\n    id: \"task-3\",\n    projectId: \"proj-1\",\n    title: \"添加搜索功能\",\n    description: \"实现全局搜索和筛选\",\n    status: TaskStatus.TODO,\n    priority: TaskPriority.MEDIUM,\n    dueDate: new Date(\"2025-02-05\"),\n    estimatedHours: 6,\n    actualHours: null,\n    tags: [\"功能\", \"搜索\"],\n    createdAt: new Date(\"2025-01-12\"),\n    updatedAt: new Date(\"2025-01-12\"),\n  },\n];\n\nexport default function ProjectCardExample() {\n  return (\n    <div className=\"max-w-sm space-y-4 p-4\">\n      <ProjectCard \n        project={mockProject} \n        tasks={mockTasks}\n        onEdit={(project) => console.log(\"Edit project:\", project)}\n        onDelete={(id) => console.log(\"Delete project:\", id)}\n        onOpen={(id) => console.log(\"Open project:\", id)}\n      />\n    </div>\n  );\n}","size_bytes":2093},"client/src/components/examples/SearchBar.tsx":{"content":"import SearchBar from \"../SearchBar\";\n\nexport default function SearchBarExample() {\n  return (\n    <div className=\"max-w-md p-4\">\n      <SearchBar\n        placeholder=\"搜索项目和任务...\"\n        onSearch={(query) => console.log(\"Search query:\", query)}\n        onClear={() => console.log(\"Search cleared\")}\n      />\n    </div>\n  );\n}","size_bytes":340},"client/src/components/examples/TaskCard.tsx":{"content":"import TaskCard from \"../TaskCard\";\nimport { Task, TaskStatus, TaskPriority } from \"@shared/schema\";\n\nconst mockTask: Task = {\n  id: \"1\",\n  projectId: \"proj-1\",\n  title: \"设计用户界面原型\",\n  description: \"为项目管理应用创建高保真UI原型，包含任务看板和项目概览页面。需要考虑移动端适配和深色模式支持。\",\n  status: TaskStatus.IN_PROGRESS,\n  priority: TaskPriority.HIGH,\n  dueDate: new Date(\"2025-01-20\"),\n  estimatedHours: 8,\n  actualHours: null,\n  tags: [\"设计\", \"UI/UX\", \"原型\"],\n  createdAt: new Date(\"2025-01-10\"),\n  updatedAt: new Date(\"2025-01-15\"),\n};\n\nexport default function TaskCardExample() {\n  return (\n    <div className=\"max-w-sm space-y-4 p-4\">\n      <TaskCard \n        task={mockTask} \n        onEdit={(task) => console.log(\"Edit task:\", task)}\n        onDelete={(id) => console.log(\"Delete task:\", id)}\n        onStatusChange={(id, status) => console.log(\"Status change:\", id, status)}\n      />\n    </div>\n  );\n}","size_bytes":985},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeProvider } from \"@/lib/theme\";\nimport { ThemeToggle } from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  );\n}","size_bytes":262},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# Personal Project Management Application\n\n## Overview\n\nA comprehensive personal project management tool built with React, TypeScript, and Node.js. The application provides task management, project tracking, and progress visualization through multiple views including a Kanban board, dashboard, and task list. It's designed specifically for individual developers and project managers to organize their work efficiently.\n\nThe system follows a Material Design-inspired approach with a focus on productivity and functionality. It supports both light and dark themes, features a responsive design, and includes advanced search capabilities across projects and tasks.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with pages for Dashboard, Kanban View, Projects, Tasks, Analytics, and Settings\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Radix UI components with shadcn/ui configuration for consistent design system\n- **Styling**: Tailwind CSS with custom theme variables supporting light/dark modes\n- **Component Structure**: Organized into reusable components (TaskCard, ProjectCard, KanbanColumn, etc.) with example components for documentation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server\n- **API Design**: RESTful API with routes for projects, tasks, tags, and search functionality\n- **Data Layer**: Abstract storage interface (IStorage) with in-memory implementation (MemStorage) for development\n- **Validation**: Zod schemas for request validation with Drizzle-Zod integration\n- **Development**: Hot module replacement with Vite middleware integration\n\n### Database Design\n- **ORM**: Drizzle ORM configured for PostgreSQL\n- **Schema**: Three main tables - projects, tasks, and tags with proper relationships\n- **Features**: UUID primary keys, timestamps, status enums, and array fields for tags\n- **Migrations**: Drizzle Kit for schema management and migrations\n\n### Theme System\n- **Implementation**: Context-based theme provider with system preference detection\n- **Storage**: LocalStorage persistence for user theme preferences\n- **Variables**: CSS custom properties for consistent color theming across light/dark modes\n- **Components**: Integrated theme toggle with Radix UI dropdown menu\n\n### Search and Filtering\n- **Implementation**: Debounced search with 300ms delay using custom hook\n- **Scope**: Full-text search across projects and tasks\n- **API**: Dedicated search endpoints for projects and tasks\n- **UX**: Real-time search results with loading states and clear functionality\n\n## External Dependencies\n\n### Core Runtime\n- **@neondatabase/serverless**: PostgreSQL database connection for production\n- **drizzle-orm** & **drizzle-kit**: Database ORM and migration toolkit\n- **express**: Node.js web framework for API server\n- **tsx**: TypeScript execution for development server\n\n### Frontend Libraries\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight client-side routing\n- **@radix-ui/***: Comprehensive set of accessible UI components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Type-safe variant API for components\n- **lucide-react**: Icon library for consistent iconography\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **@vitejs/plugin-react**: React support for Vite\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling\n- **@replit/vite-plugin-cartographer**: Replit-specific development enhancements\n\n### Validation and Forms\n- **zod**: TypeScript-first schema validation\n- **@hookform/resolvers**: React Hook Form integration with Zod\n- **react-hook-form**: Form state management and validation\n\n### Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx** & **tailwind-merge**: Conditional CSS class utilities\n- **nanoid**: Unique ID generation\n- **cmdk**: Command palette component for search interfaces","size_bytes":4159},"client/src/pages/TaskList.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Plus, \n  Search, \n  Filter, \n  MoreVertical,\n  ArrowUpDown,\n  ArrowUp,\n  ArrowDown,\n  Trash2,\n  Edit,\n  Calendar,\n  Flag,\n  Loader2\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { taskApi, projectApi } from \"@/lib/api\";\nimport { Task, Project, TaskStatus, TaskPriority, TaskStatusType, TaskPriorityType } from \"@shared/schema\";\nimport { useDebounce } from \"@/hooks/use-debounce\";\n\ntype SortField = \"title\" | \"status\" | \"priority\" | \"dueDate\" | \"createdAt\" | \"updatedAt\";\ntype SortDirection = \"asc\" | \"desc\";\n\ninterface SortConfig {\n  field: SortField;\n  direction: SortDirection;\n}\n\nexport default function TaskList() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set());\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\n  const [projectFilter, setProjectFilter] = useState<string>(\"all\");\n  const [sortConfig, setSortConfig] = useState<SortConfig>({ field: \"updatedAt\", direction: \"desc\" });\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const debouncedSearchQuery = useDebounce(searchQuery, 300);\n\n  // Fetch tasks and projects\n  const { \n    data: allTasks = [], \n    isLoading: tasksLoading,\n    error: tasksError,\n    refetch: refetchTasks \n  } = useQuery({\n    queryKey: [\"/api/tasks\"],\n    queryFn: () => taskApi.getAll(),\n  });\n\n  const { \n    data: projects = [],\n    isLoading: projectsLoading \n  } = useQuery({\n    queryKey: [\"/api/projects\"],\n    queryFn: () => projectApi.getAll(),\n  });\n\n  // Delete task mutation\n  const deleteTaskMutation = useMutation({\n    mutationFn: taskApi.delete,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务已删除\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"删除失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Batch delete mutation\n  const batchDeleteMutation = useMutation({\n    mutationFn: async (taskIds: string[]) => {\n      for (const id of taskIds) {\n        await taskApi.delete(id);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setSelectedTasks(new Set());\n      toast({ title: \"批量删除成功\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"批量删除失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update task status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ taskId, status }: { taskId: string; status: string }) =>\n      taskApi.updateStatus(taskId, status),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"任务状态已更新\" });\n    },\n    onError: (error) => {\n      toast({ \n        title: \"更新失败\", \n        description: error.message, \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Filter and sort tasks\n  const getFilteredAndSortedTasks = () => {\n    // Always create a copy to avoid mutating the React Query cache\n    let filtered = [...allTasks];\n\n    // Search filter\n    if (debouncedSearchQuery) {\n      const query = debouncedSearchQuery.toLowerCase();\n      filtered = filtered.filter(task => \n        task.title.toLowerCase().includes(query) ||\n        task.description?.toLowerCase().includes(query) ||\n        (task.tags || []).some(tag => tag.toLowerCase().includes(query))\n      );\n    }\n\n    // Status filter\n    if (statusFilter !== \"all\") {\n      filtered = filtered.filter(task => task.status === statusFilter);\n    }\n\n    // Priority filter\n    if (priorityFilter !== \"all\") {\n      filtered = filtered.filter(task => task.priority === priorityFilter);\n    }\n\n    // Project filter\n    if (projectFilter !== \"all\") {\n      filtered = filtered.filter(task => task.projectId === projectFilter);\n    }\n\n    // Sort\n    filtered.sort((a, b) => {\n      const { field, direction } = sortConfig;\n      let aValue: any, bValue: any;\n\n      switch (field) {\n        case \"title\":\n          aValue = a.title.toLowerCase();\n          bValue = b.title.toLowerCase();\n          break;\n        case \"status\":\n          aValue = a.status;\n          bValue = b.status;\n          break;\n        case \"priority\":\n          const priorityOrder: Record<string, number> = { low: 1, medium: 2, high: 3, urgent: 4 };\n          aValue = priorityOrder[a.priority] || 0;\n          bValue = priorityOrder[b.priority] || 0;\n          break;\n        case \"dueDate\":\n          aValue = a.dueDate ? new Date(a.dueDate).getTime() : 0;\n          bValue = b.dueDate ? new Date(b.dueDate).getTime() : 0;\n          break;\n        case \"createdAt\":\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n          break;\n        case \"updatedAt\":\n          aValue = new Date(a.updatedAt).getTime();\n          bValue = new Date(b.updatedAt).getTime();\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) return direction === \"asc\" ? -1 : 1;\n      if (aValue > bValue) return direction === \"asc\" ? 1 : -1;\n      return 0;\n    });\n\n    return filtered;\n  };\n\n  const filteredTasks = getFilteredAndSortedTasks();\n\n  // Handle sorting\n  const handleSort = (field: SortField) => {\n    setSortConfig(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === \"asc\" ? \"desc\" : \"asc\"\n    }));\n  };\n\n  // Handle task selection\n  const handleTaskSelect = (taskId: string, checked: boolean) => {\n    const newSelected = new Set(selectedTasks);\n    if (checked) {\n      newSelected.add(taskId);\n    } else {\n      newSelected.delete(taskId);\n    }\n    setSelectedTasks(newSelected);\n  };\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedTasks(new Set(filteredTasks.map(task => task.id)));\n    } else {\n      setSelectedTasks(new Set());\n    }\n  };\n\n  // Handle batch operations\n  const handleBatchDelete = () => {\n    if (selectedTasks.size > 0) {\n      batchDeleteMutation.mutate(Array.from(selectedTasks));\n    }\n  };\n\n  const handleBatchStatusUpdate = (status: TaskStatusType) => {\n    Array.from(selectedTasks).forEach(taskId => {\n      updateStatusMutation.mutate({ taskId, status });\n    });\n    setSelectedTasks(new Set());\n  };\n\n  // Get project name\n  const getProjectName = (projectId: string) => {\n    const project = projects.find(p => p.id === projectId);\n    return project?.name || \"未知项目\";\n  };\n\n  // Format date\n  const formatDate = (date: string | Date | null) => {\n    if (!date) return \"-\";\n    return new Intl.DateTimeFormat('zh-CN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    }).format(new Date(date));\n  };\n\n  // Highlight search terms\n  const highlightSearchTerm = (text: string, searchTerm: string) => {\n    if (!searchTerm || !text) return text;\n    \n    const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi');\n    const parts = text.split(regex);\n    \n    return (\n      <>\n        {parts.map((part, index) => \n          // Use index parity instead of regex.test to avoid stateful issues\n          index % 2 === 1 ? (\n            <mark key={index} className=\"bg-yellow-200 dark:bg-yellow-800 px-0.5 rounded\">\n              {part}\n            </mark>\n          ) : (\n            part\n          )\n        )}\n      </>\n    );\n  };\n\n  // Status and priority display configs\n  const statusConfig = {\n    [TaskStatus.TODO]: { label: \"待办\", color: \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300\" },\n    [TaskStatus.IN_PROGRESS]: { label: \"进行中\", color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\" },\n    [TaskStatus.DONE]: { label: \"已完成\", color: \"bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300\" },\n  };\n\n  const priorityConfig = {\n    [TaskPriority.LOW]: { label: \"低\", color: \"bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300\" },\n    [TaskPriority.MEDIUM]: { label: \"中\", color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300\" },\n    [TaskPriority.HIGH]: { label: \"高\", color: \"bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300\" },\n    [TaskPriority.URGENT]: { label: \"紧急\", color: \"bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300\" },\n  };\n\n  const getSortIcon = (field: SortField) => {\n    if (sortConfig.field !== field) {\n      return <ArrowUpDown className=\"w-4 h-4\" />;\n    }\n    return sortConfig.direction === \"asc\" ? \n      <ArrowUp className=\"w-4 h-4\" /> : \n      <ArrowDown className=\"w-4 h-4\" />;\n  };\n\n  if (tasksError) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive mb-4\">加载任务失败: {tasksError.message}</p>\n          <Button onClick={() => refetchTasks()} variant=\"outline\">\n            重试\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"task-list-page\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\" data-testid=\"page-title\">\n            任务列表\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            管理和跟踪所有任务 • 共 {filteredTasks.length} 个任务\n          </p>\n        </div>\n        <Button\n          onClick={() => console.log(\"Create new task\")}\n          data-testid=\"button-create-task\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          新建任务\n        </Button>\n      </div>\n\n      {/* Toolbar */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center flex-1\">\n              {/* Search */}\n              <div className=\"relative flex-1 min-w-[200px]\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"搜索任务...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-tasks\"\n                />\n              </div>\n\n              {/* Filters */}\n              <div className=\"flex gap-2 items-center\">\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-[120px]\" data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"状态\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">所有状态</SelectItem>\n                    <SelectItem value={TaskStatus.TODO}>待办</SelectItem>\n                    <SelectItem value={TaskStatus.IN_PROGRESS}>进行中</SelectItem>\n                    <SelectItem value={TaskStatus.DONE}>已完成</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                  <SelectTrigger className=\"w-[120px]\" data-testid=\"select-priority-filter\">\n                    <SelectValue placeholder=\"优先级\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">所有优先级</SelectItem>\n                    <SelectItem value={TaskPriority.LOW}>低</SelectItem>\n                    <SelectItem value={TaskPriority.MEDIUM}>中</SelectItem>\n                    <SelectItem value={TaskPriority.HIGH}>高</SelectItem>\n                    <SelectItem value={TaskPriority.URGENT}>紧急</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={projectFilter} onValueChange={setProjectFilter}>\n                  <SelectTrigger className=\"w-[140px]\" data-testid=\"select-project-filter\">\n                    <SelectValue placeholder=\"项目\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">所有项目</SelectItem>\n                    {projects.map((project) => (\n                      <SelectItem key={project.id} value={project.id}>\n                        {project.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Batch Operations */}\n            {selectedTasks.size > 0 && (\n              <div className=\"flex gap-2 items-center\">\n                <span className=\"text-sm text-muted-foreground\">\n                  已选择 {selectedTasks.size} 个任务\n                </span>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-batch-operations\">\n                      批量操作\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent>\n                    <DropdownMenuItem onClick={() => handleBatchStatusUpdate(TaskStatus.TODO)}>\n                      标记为待办\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleBatchStatusUpdate(TaskStatus.IN_PROGRESS)}>\n                      标记为进行中\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleBatchStatusUpdate(TaskStatus.DONE)}>\n                      标记为已完成\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={handleBatchDelete}\n                      className=\"text-destructive focus:text-destructive\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      批量删除\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tasks Table */}\n      <Card>\n        <CardHeader className=\"border-b bg-muted/30\">\n          <div className=\"grid grid-cols-[auto_1fr_120px_100px_100px_120px_auto] gap-4 items-center text-sm font-medium text-muted-foreground\">\n            <div className=\"flex items-center\">\n              <Checkbox\n                checked={selectedTasks.size === filteredTasks.length && filteredTasks.length > 0}\n                onCheckedChange={handleSelectAll}\n                data-testid=\"checkbox-select-all\"\n              />\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleSort(\"title\")}\n              className=\"justify-start p-0 h-auto font-medium text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-sort-title\"\n            >\n              任务标题\n              {getSortIcon(\"title\")}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleSort(\"status\")}\n              className=\"justify-center p-0 h-auto font-medium text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-sort-status\"\n            >\n              状态\n              {getSortIcon(\"status\")}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleSort(\"priority\")}\n              className=\"justify-center p-0 h-auto font-medium text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-sort-priority\"\n            >\n              优先级\n              {getSortIcon(\"priority\")}\n            </Button>\n            <div className=\"text-center\">项目</div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"justify-center p-0 h-auto font-medium text-muted-foreground hover:text-foreground\"\n                  data-testid=\"button-sort-date\"\n                >\n                  日期排序 {getSortIcon(sortConfig.field.includes('Date') || sortConfig.field.includes('At') ? sortConfig.field as SortField : 'dueDate')}\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent>\n                <DropdownMenuItem onClick={() => handleSort(\"dueDate\")}>到期日期</DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleSort(\"createdAt\")}>创建时间</DropdownMenuItem>\n                <DropdownMenuItem onClick={() => handleSort(\"updatedAt\")}>更新时间</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n            <div className=\"text-center\">操作</div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          {tasksLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\n              <span className=\"text-muted-foreground\">加载任务中...</span>\n            </div>\n          ) : filteredTasks.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-muted-foreground\">\n                {searchQuery || statusFilter !== \"all\" || priorityFilter !== \"all\" || projectFilter !== \"all\" \n                  ? \"没有找到符合条件的任务\" \n                  : \"暂无任务\"}\n              </div>\n            </div>\n          ) : (\n            <div className=\"divide-y\">\n              {filteredTasks.map((task) => (\n                <div\n                  key={task.id}\n                  className=\"grid grid-cols-[auto_1fr_120px_100px_100px_120px_auto] gap-4 items-center p-4 hover:bg-muted/50 transition-colors\"\n                  data-testid={`task-row-${task.id}`}\n                >\n                  {/* Checkbox */}\n                  <div className=\"flex items-center\">\n                    <Checkbox\n                      checked={selectedTasks.has(task.id)}\n                      onCheckedChange={(checked) => handleTaskSelect(task.id, checked as boolean)}\n                      data-testid={`checkbox-task-${task.id}`}\n                    />\n                  </div>\n\n                  {/* Title and Description */}\n                  <div className=\"min-w-0\">\n                    <h3 \n                      className=\"font-medium text-sm text-foreground line-clamp-1\" \n                      data-testid={`text-task-title-${task.id}`}\n                    >\n                      {highlightSearchTerm(task.title, debouncedSearchQuery)}\n                    </h3>\n                    {task.description && (\n                      <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                        {highlightSearchTerm(task.description, debouncedSearchQuery)}\n                      </p>\n                    )}\n                    {(task.tags && task.tags.length > 0) && (\n                      <div className=\"flex gap-1 mt-2\">\n                        {task.tags.slice(0, 3).map((tag, index) => (\n                          <Badge \n                            key={index} \n                            variant=\"outline\" \n                            className=\"text-xs px-1 py-0 h-5\"\n                          >\n                            {tag}\n                          </Badge>\n                        ))}\n                        {task.tags.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs px-1 py-0 h-5\">\n                            +{task.tags.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Status */}\n                  <div className=\"text-center\">\n                    <Badge \n                      className={statusConfig[task.status as TaskStatusType].color}\n                      data-testid={`badge-status-${task.id}`}\n                    >\n                      {statusConfig[task.status as TaskStatusType].label}\n                    </Badge>\n                  </div>\n\n                  {/* Priority */}\n                  <div className=\"text-center\">\n                    <Badge \n                      className={priorityConfig[task.priority as TaskPriorityType].color}\n                      data-testid={`badge-priority-${task.id}`}\n                    >\n                      <Flag className=\"w-3 h-3 mr-1\" />\n                      {priorityConfig[task.priority as TaskPriorityType].label}\n                    </Badge>\n                  </div>\n\n                  {/* Project */}\n                  <div className=\"text-center text-sm text-muted-foreground truncate\">\n                    {getProjectName(task.projectId)}\n                  </div>\n\n                  {/* Due Date */}\n                  <div className=\"text-center text-sm text-muted-foreground\">\n                    {task.dueDate && (\n                      <div className=\"flex items-center justify-center gap-1\">\n                        <Calendar className=\"w-3 h-3\" />\n                        {formatDate(task.dueDate)}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Actions */}\n                  <div className=\"flex items-center justify-center\">\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"icon\"\n                          data-testid={`button-task-actions-${task.id}`}\n                        >\n                          <MoreVertical className=\"w-4 h-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => console.log(\"Edit task:\", task.id)}>\n                          <Edit className=\"w-4 h-4 mr-2\" />\n                          编辑\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem onClick={() => updateStatusMutation.mutate({ taskId: task.id, status: TaskStatus.TODO })}>\n                          标记为待办\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateStatusMutation.mutate({ taskId: task.id, status: TaskStatus.IN_PROGRESS })}>\n                          标记为进行中\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => updateStatusMutation.mutate({ taskId: task.id, status: TaskStatus.DONE })}>\n                          标记为已完成\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem \n                          onClick={() => deleteTaskMutation.mutate(task.id)}\n                          className=\"text-destructive focus:text-destructive\"\n                        >\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\n                          删除\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":24586}},"version":1}